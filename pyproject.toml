[build-system]
requires = ["setuptools~=69.0", "wheel~=0.43.0"]
build-backend = "setuptools.build_meta"

[project]
name            = "plugwise"
version         = "0.37.4.1"
license         = {file = "LICENSE"}
description     = "Plugwise Smile (Adam/Anna/P1) and Stretch module for Python 3."
readme          = "README.md"
keywords        = ["home", "automation", "plugwise", "module"]
classifiers     = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]
authors = [
        { name = "Plugwise device owners"}
]
maintainers = [
        { name = "bouwew"},
        { name = "CoMPaTech" }
]
requires-python = ">=3.11.0"
dependencies    = [
        "aiohttp",
        "defusedxml",
        "munch",
        "python-dateutil",
]

[project.urls]
"Source Code" = "https://github.com/plugwise/python-plugwise"
"Bug Reports" = "https://github.com/plugwise/python-plugwise/issues"

[tool.setuptools]
platforms = ["any"]
include-package-data = true

[tool.setuptools.package-data]
"plugwise" = ["py.typed"]

[tool.setuptools.packages.find]
include = ["plugwise*"]

[tool.black]
target-version = ["py312"]
exclude = 'generated'

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "plugwise",
    "homeassistant",
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true

[tool.pylint.MASTER]
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
# Disabled for now: https://github.com/PyCQA/pylint/issues/3584
jobs = 2
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]
persistent = false
extension-pkg-whitelist = [
    "ciso8601",
    "cv2",
]

[tool.pylint.BASIC]
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "T",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
disable = [
    "format",
    "abstract-method",
    "consider-using-f-string",
    "cyclic-import",
    "duplicate-code",
    "fixme",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "raise-missing-from",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-many-nested-blocks",
]
# for now (20201031) added the below while we are codemerging/-improving
# missing-class-docstring
# missing-function-docstring
# missing-module-docstring
# too-many-nested-blocks => inherent with fixing complexity
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
markers = [
    # mark a test as a asynchronous io test.
    "asyncio",
]

testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
]

[tool.mypy]
python_version = "3.12"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
enable_error_code = "ignore-without-code"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
strict = true
warn_return_any = true
warn_unreachable = true
exclude = []

[tool.coverage.run]
source = [ "plugwise" ]
omit= [
    "*/venv/*",
    "setup.py",
]

[tool.ruff]
target-version = "py312"

lint.select = [
    "B002", # Python does not support the unary prefix increment
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904", # Use raise from err or None to specify exception cause
    "C",  # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D",  # docstrings
    "DTZ003",  # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004",  # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "G", # flake8-logging-format
    "I",  # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "ISC001", # Implicitly concatenated string literals on one line
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    # "PGH001", # PGH001 has been remapped to S307
    "PGH004", # Use specific rule codes when using noqa
    "PL", # https://github.com/astral-sh/ruff/issues/7491#issuecomment-1730008111
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "PLC", # pylint
    "PLE", # pylint
    "PLR", # pylint
    "PLW", # pylint
    "Q000", # Double quotes found but single quotes preferred
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "S102", # Use of exec detected
    "S103",  # bad-file-permissions
    "S108",  # hardcoded-temp-file
    "S306",  # suspicious-mktemp-usage
    "S307",  # suspicious-eval-usage
    "S313",  # suspicious-xmlc-element-tree-usage
    "S314",  # suspicious-xml-element-tree-usage
    "S315",  # suspicious-xml-expat-reader-usage
    "S316",  # suspicious-xml-expat-builder-usage
    "S317",  # suspicious-xml-sax-usage
    "S318",  # suspicious-xml-mini-dom-usage
    "S319",  # suspicious-xml-pull-dom-usage
    "S320",  # suspicious-xmle-tree-usage
    "S601",  # paramiko-call
    "S602",  # subprocess-popen-with-shell-equals-true
    "S604",  # call-with-shell-equals-true
    "S608",  # hardcoded-sql-expression
    "S609",  # unix-command-wildcard-injection
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM208", # Use {expr} instead of not (not {expr})
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T100", # Trace found: {name} used
    "T20",  # flake8-print
    "TID251", # Banned imports
    "TRY004", # Prefer TypeError exception for invalid type
    # "TRY200", # TRY200 has been remapped to B904
    "TRY302", # Remove exception handler; error is immediately re-raised
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

lint.ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    # False positives https://github.com/astral-sh/ruff/issues/5386
    "PLC0208", # Use a sequence type instead of a `set` when iterating over values
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004",  # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "UP006", # keep type annotation style as is
    "UP007", # keep type annotation style as is
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    #"UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

exclude = []

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pytz".msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
section-order = ["future", "standard-library", "first-party", "third-party", "local-folder"]
known-third-party = [
    "tests",
]
known-first-party = [
    "plugwise",
    "voluptuous",
    "pytest",
]
forced-separate = [
    "tests",
]
combine-as-imports = true
split-on-trailing-comma = false
